Name,Bio,Title,Abstract,Confirmed,Traveling,Twitter,Github,head shot,Column 6,Column 7,Column 8,Column 9,Column 10,Column 11,Column 12,Column 13,Column 14,Column 15,Column 16,Column 17
Lane Wagner,"Founder of Boot.dev, host of Backend Banter podcast, go dev",Go: The Easiest Hard Language Out There,"Sorry this is just gonna be an unordered list of points that I'll make in the talk:\n\n* Go is one of the easiest programming languages to *use*\n* Due to compilation steps and static typing, its still harder as a first language, than say Python (part of this is the lack of understanding between different types of errors, say compiler errors vs runtime errors)\n* Go is the best 2nd language in the world\n* Go is often chosen for *very* hard problem spaces. This accounts for the paradox of 'Go is easy, but we only want seniors' (looking at you k8s)\n* Go makes concurrency easier, but concurrency is hard\n* The Go community hates magic (easier in the long run, harder in the short-term)\n* Go 'magic deploy' on heroku like runtimes is awful for education (Go apps are statically compiled what are we doing)",TRUE,,,,,,,,,,,,,,,,
Adam Bernot,Adam is a Software Engineer who works on the Google Cloud Managed Service for Prometheus.,Continuous Profiling for Scale,"Go offers pprof, a powerful tool to profile the performance of a program. But the collected data is often limited if you don’t profile on your production environments, as you have to artificially simulate workloads that may be different from production workloads. With continuous profiling, you can sample real-world performance in production with minimal overhead. This talk covers how an intern at Google evaluated and implemented open source tools to implement continuous profiling, leading to more efficient Go code.",TRUE,,,,,,,,,,,,,,,,
Carson Anderson,Carson is a fixture in the local Kubernetes and Go meetups. He has also been working tirelessly for the last 4 years to help build Weave's a Developer Experience Platform.,Stop Sleeping On First Class Functions!,"Go has so many great features that draw us in: Channels, Goroutines, static compilation, a simple syntax, etc. But there is one feature that Go supports which needs more love: first class functions. This feature is not unique to Go, and with all the other shiny features to talk about, I think it is all too often overlooked and underutilized. First class functions (functions as variables) and closures (capturing data in those functions) are two incredibly powerful features that are built right into Go. But even seasoned Go developers often forget these features. We need to fix this!\nWe are going to go over several cases where these two features massively improve code usability and readability:\n\n* Dependency Injection\n  * Passing functions as arguments to make our code testable\n* Cleaning up Go templates\n  * Reducing complexity in templates with closures\n* Hiding channel usage\n  * Stop passing channels, pass functions\n* Building an execution pipeline\n  * Making ordered operations easy and extensible",TRUE,,,,,,,,,,,,,,,,
Matthew Sanabria,"Matthew is an engineering leader focused on building reliable, scalable, and observable systems. Matthew is known for using his breadth and depth of experience to add value in minimal context situations and help great people become great engineers through mentoring. Matthew serves the Go community as a member of GoBridge and a contributor to the Exercism Go track. In his spare time, Matthew spends time with his family, helps grow his wife's chocolate business, works on home improvement projects, and reads technical resources to learn and tinker.",Pointers and Interfaces in Go: What All Gophers Should Know,"This talk describes everything a Gopher should know about pointers and interfaces in Go. Attendees will learn how pointers are represented in memory, the difference between pointer and value semantics, what happens as functions are added and removed from the call stack, and how interfaces can both enable and hinder behavior in programs. Unlike an interface, there's nothing to implement before coming to this talk. All are welcome!",TRUE,,,,,,,,,,,,,,,,
Ulises Flynn,Computer Engineer and Software Developer,Using TinyGo and LoRA to monitor and control a hot tub,"I purchased a hot tub during COVID (probably like a lot of people) and wanted to control the temperature for the hot tub wirelessly. Unfortunately I could not find off the shelf controllers for this hot tub, hence this project was born. This talk goes through the hardware and software needed to complete the project.",TRUE,,,,,,,,,,,,,,,,
Danny Radosevich,Danny Radosevich is a Computer Science Lecturer at the University of Wyoming. He has his MS in Computer Science and is finishing his PhD. ,Parducky: A Go based hardware keylogger for Raspberry Pis,"Parducky is a hardware-based keylogger, written in Go, that leverages a Raspberry Pi utilizing USB OTG to act as an intermediary between a USB keyboard and a host system. Parducky was developed to overcome the limitations of existing Python libraries, allowing it to efficiently read input from a connected keyboard, log the keystrokes, and send the keystrokes to the connected host computer. Unlike the popular Python libraries Pynput and Keyboard, Parducky can be run without escalated privileges, over a remote session, and can handle quick successive key-presses thanks to Go’s quick compiled nature. Developing Parducky required a deep understanding of the protocols used in keyboard communication, elements within the Linux Kernel, and how to best utilize Go to ensure robustness and efficiency.\n\nThis talk will provide the audience with an understanding of HID communication, how to leverage it in Go, and the intricacies of keyboard-host interactions. Attendees will gain the ability to quickly write their own Go applications to both receive input directly from a keyboard and write output as a keyboard, while working on a Raspberry Pi utilizing USB OTG.",TRUE,,,,,,,,,,,,,,,,